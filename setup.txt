
https://jsmastery.com/video-kit/8fcd696f-9147-492c-bb96-a4d8108f849c

Puter.js
It brings serverless auth,cloud,and AI services directly to your browser-side Javascript with no backend code or config required.

WebStorm => Completely free

Junie => JetBrain's smart coding agent that improves productivity.

Puter.js: https://jsm.dev/resumind-puterjs
Puter.com: https://jsm.dev/resumind-puter
Junie AI: https://jsm.dev/resumind-junie
WebStorm: https://jsm.dev/resumind-webstorm

set up acc on puter.com
https://jsm.dev/resumind-puter
to use it later on for true serverless ai, auth and cloud.
- own personal computer on the internet
We won't be looking into puter.com
rather we'll look into puter.js
-They're the pioneer of the user pays model which allows each user of your app to cover their own cost.
- This means , no matter how many user I have , it only costs us zero in infrastructure.

open your folder in webstorm.
open vite.dev
copy npm create vite@latest .
paste it in terminal
ignore files and continue
framework: react
variant: React Router v7
proceed : y
initialize a git repo : yes
install dependencies: yes
npm run dev

vite.config.js
This file contains the vite configuration for the project.
- and we can see that we already have three plugin set up:
Tailwind for styling , react for react routing and tsconfigPaths for type safety.

react-router.config
config options for react router making use of the server-side rendering.

tsconfig.json
contains rules that TypeScript will use to ensure typeSafety throughout the project.

package.json
contains all of our dependencies.

docker file
which vite generated by default letting you host your file inside of your docker container.

.gitignore and .dockerignore
- to make sure that you dont push any secrets to github

public folder
- consists of all of your assets

node modules folder
- consists of all your dependencies and additional react router meta data.

What we need to care of the most:

App folder:
- it's our core application
- currently it just contains just the route folder and the welcome directories.
- as soon as we start building, we'll add more things to it like the lib and components.

app/routes.ts
- it is a react routers configuration file
currently it contains only one index route , loading the homepage:

"""
export default [index("routes/home.tsx")] satisfies RouteConfig;
"""
we'll expand it very soon.

app/root.tsx
- Main entry point of the application
- Contains the default layout and loads all the necessary scripts.
- All the other pages are going to be passed as children to this page.
- It also contains some error boundaries.
- Whenever some error occurs, we can easily catch them.

app/app.css
- main css file for tailwind.
- we're going to keep all of our custom classes here.
- so the actual components won't get too cluttered.
- right now, it's pretty empty.
But he'll provide us with a ready file in the video kit.

In a seperate terminal session,
npm install -D tw-animate-css
=> for creating some cool tailwind animations

npm i clsx tailwind-merge pdfjs-dist zustand

set up public folder assets using the link at the top.

set up app/app.js

override the existing ones with new app.css